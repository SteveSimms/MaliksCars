@page "/cars-page"
@using MaliksCars.Application.Services.Auth
@using System.Security.Claims

@inject ICarService _carService
@inject NavigationManager _navigationManager


@inject UsersService _usersService
@inject AuthenticationStateProvider _authenticationStateProvider


@attribute [Authorize]

<div class="grid grid-cols-3 gap-4 mt-20 ml-12">
    @foreach (var car in cars)
    {

        <div class="flex justify-center items-center ">






            <div class="flex flex-col max-w-sm rounded overflow-hidden shadow-lg">
                <img class="w-full card-img" src="@car.ImageUrl" alt="@car.Name" @onclick="() => NavigateToCarDetails(car.Id)">
                <div class="flex-grow px-6 py-4">
                    <div class="font-bold text-xl mb-2">@car.Name - @car.Model - @car.Year</div>

                </div>

                <div class="font-bold text-xl mb-2   ml-3 text-green-500">
                    @if (decimal.TryParse(car.BasePrice, out var basePrice))
                    {
                        @($"{basePrice:C}")
                    }
                </div>
                <div class="font-bold text-xl mb-2  ml-2">@car.Name - @car.Model - @car.Year</div>
                <p class="text-gray-700 text-base  ml-3">
                    @car.Description.Substring(0, Math.Min(car.Description.Length, 60))@(car.Description.Length > 40 ? "..." : "")
                </p>

               
                    <div class="px-6 py-4 flex items-center">
                        <button @onclick="() => NavigateToCarDetails(car.Id)" class="bg-purple-500 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-600 focus:ring-opacity-50">
                            See Details
                        </button>
                        <button @onclick="() => ToggleFavorite(car.Id)" class="  ml-5">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="@GetStarColor(car)" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-12 h-8">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M11.48 3.499a.562.562 0 011.04 0l2.125 5.111a.563.563 0 00.475.345l5.518.442c.499.04.701.663.321.988l-4.204 3.602a.563.563 0 00-.182.557l1.285 5.385a.562.562 0 01-.84.61l-4.725-2.885a.563.563 0 00-.586 0L6.982 20.54a.562.562 0 01-.84-.61l1.285-5.386a.562.562 0 00-.182-.557l-4.204-3.602a.563.563 0 01.321-.988l5.518-.442a.563.563 0 00.475-.345L11.48 3.5z" />
                            </svg>
                        </button>


                    </div>
              

                </div>
            </div>
    }
</div>

<style>
    .card-img {
        height: 200px;
        object-fit: cover;
    }
</style>


@code {
    private List<Car> cars;
    private User user;
    private bool IsAdmin;


    protected override async Task OnInitializedAsync()
    {

        cars = await _carService.GetCarsAsync();

        var authenticationState = await _authenticationStateProvider.GetAuthenticationStateAsync();

        var userIdString = authenticationState.User.FindFirst(ClaimTypes.UserData)?.Value;

        if (int.TryParse(userIdString, out var userId))
        {
            user = await _usersService.FindUserAsync(userId);
            IsAdmin = await _usersService.GetUserRolesAsync(userId);
        }


        //user = await _usersService.FindUserAsync(userId);
        Console.WriteLine($"Current user Id {user.Id} CurrentUserFavs {user.UserFavoriteCars.Count}");



    }






    private void NavigateToCarDetails(int carId)
    {
        _navigationManager.NavigateTo($"/car-details/{carId}");
    }

    private async Task AddtoWishList(int carId)
    {
        var userId = user.Id;
        await _carService.AddToWishListAsync(userId, carId);
        // Refresh the user variable by querying the database again
        user = await _usersService.FindUserAsync(userId);
        Console.WriteLine($"CurrentUser {user.Name} CurrentUserFavs {user.UserFavoriteCars.Count}");
    }


    private bool IsFavorite(Car car)
    {
        // Check if the car is in the user's favorites
        return user.UserFavoriteCars.Any(ufc => ufc.CarId == car.Id);
    }

    private string GetStarColor(Car car)
    {
        // Return #8B5CF6 (purple-500) if the car is a favorite, otherwise white


        return IsFavorite(car) ? "#A78BFA" : "white";

    }

    private async Task ToggleFavorite(int carId)
    {
        var userId = user.Id;
        var car = cars.FirstOrDefault(c => c.Id == carId);

        if (car != null)
        {
            if (IsFavorite(car))
            {
                // Remove from favorites
                await _carService.RemoveFromWishListAsync(userId, carId);
            }
            else
            {
                // Add to favorites
                await _carService.AddToWishListAsync(userId, carId);
            }

            // Refresh the user variable by querying the database again
            user = await _usersService.FindUserAsync(userId);

            // Manually trigger a re-render of the component
            StateHasChanged();
        }
    }

}


